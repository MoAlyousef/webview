/* automatically generated by rust-bindgen 0.56.0 */

pub const WEBVIEW_VERSION_MAJOR: u32 = 0;
pub const WEBVIEW_VERSION_MINOR: u32 = 10;
pub const WEBVIEW_VERSION_PATCH: u32 = 0;
pub const WEBVIEW_VERSION_PRE_RELEASE: &'static [u8; 1usize] = b"\0";
pub const WEBVIEW_VERSION_BUILD_METADATA: &'static [u8; 1usize] = b"\0";
pub const WEBVIEW_HINT_NONE: u32 = 0;
pub const WEBVIEW_HINT_MIN: u32 = 1;
pub const WEBVIEW_HINT_MAX: u32 = 2;
pub const WEBVIEW_HINT_FIXED: u32 = 3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct webview_version_t {
    pub major: ::std::os::raw::c_uint,
    pub minor: ::std::os::raw::c_uint,
    pub patch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_webview_version_t() {
    assert_eq!(
        ::std::mem::size_of::<webview_version_t>(),
        12usize,
        concat!("Size of: ", stringify!(webview_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<webview_version_t>(),
        4usize,
        concat!("Alignment of ", stringify!(webview_version_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<webview_version_t>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<webview_version_t>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_t),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<webview_version_t>())).patch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_t),
            "::",
            stringify!(patch)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct webview_version_info_t {
    pub version: webview_version_t,
    pub version_number: [::std::os::raw::c_char; 32usize],
    pub pre_release: [::std::os::raw::c_char; 48usize],
    pub build_metadata: [::std::os::raw::c_char; 48usize],
}
#[test]
fn bindgen_test_layout_webview_version_info_t() {
    assert_eq!(
        ::std::mem::size_of::<webview_version_info_t>(),
        140usize,
        concat!("Size of: ", stringify!(webview_version_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<webview_version_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(webview_version_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<webview_version_info_t>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_info_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<webview_version_info_t>())).version_number as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_info_t),
            "::",
            stringify!(version_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<webview_version_info_t>())).pre_release as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_info_t),
            "::",
            stringify!(pre_release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<webview_version_info_t>())).build_metadata as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(webview_version_info_t),
            "::",
            stringify!(build_metadata)
        )
    );
}
pub type webview_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn webview_create(
        debug: ::std::os::raw::c_int,
        window: *mut ::std::os::raw::c_void,
    ) -> webview_t;
}
extern "C" {
    pub fn webview_destroy(w: webview_t);
}
extern "C" {
    pub fn webview_run(w: webview_t);
}
extern "C" {
    pub fn webview_terminate(w: webview_t);
}
extern "C" {
    pub fn webview_dispatch(
        w: webview_t,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(w: webview_t, arg: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn webview_get_window(w: webview_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn webview_set_title(w: webview_t, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn webview_set_size(
        w: webview_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        hints: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn webview_navigate(w: webview_t, url: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn webview_set_html(w: webview_t, html: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn webview_init(w: webview_t, js: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn webview_eval(w: webview_t, js: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn webview_bind(
        w: webview_t,
        name: *const ::std::os::raw::c_char,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                seq: *const ::std::os::raw::c_char,
                req: *const ::std::os::raw::c_char,
                arg: *mut ::std::os::raw::c_void,
            ),
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn webview_unbind(w: webview_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn webview_return(
        w: webview_t,
        seq: *const ::std::os::raw::c_char,
        status: ::std::os::raw::c_int,
        result: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn webview_version() -> *const webview_version_info_t;
}
